for(i in toSummarize){
assign(apste0(i),summarize(sims[i]))
}
toSummarize<-c("pYoy","pAdult","phiYoy","phiAdult")
for(i in toSummarize){
assign(paste0(i),summarize(sims[i]))
}
dim
summarize<-function(x,dim=c(2,3)){
getSummary<-function(x){
meanX<-mean(x)
quantiles<-quantile(x,c(0.025,0.975))
return(c(meanX,quantiles))
}
result<-data.table(dcast(melt(apply(x,dim=dim,getSummary)),
Var2+Var3~Var1))
setnames(result,c("sample","river","mean","lower","upper"))
return(result)
}
toSummarize<-c("pYoy","pAdult","phiYoy","phiAdult")
for(i in toSummarize){
assign(paste0(i),summarize(sims[i]))
}
dim
summarize<-function(x,dimension=c(2,3)){
getSummary<-function(x){
meanX<-mean(x)
quantiles<-quantile(x,c(0.025,0.975))
return(c(meanX,quantiles))
}
result<-data.table(dcast(melt(apply(x,dim=dimension,getSummary)),
Var2+Var3~Var1))
setnames(result,c("sample","river","mean","lower","upper"))
return(result)
}
toSummarize<-c("pYoy","pAdult","phiYoy","phiAdult")
for(i in toSummarize){
assign(paste0(i),summarize(sims[i]))
}
summarize<-function(x,dimension=c(2,3)){
getSummary<-function(x){
meanX<-mean(x)
quantiles<-quantile(x,c(0.025,0.975))
return(c(meanX,quantiles))
}
result<-data.table(dcast(melt(apply(x,dim=dimension,FUN=getSummary)),
Var2+Var3~Var1))
setnames(result,c("sample","river","mean","lower","upper"))
return(result)
}
toSummarize<-c("pYoy","pAdult","phiYoy","phiAdult")
for(i in toSummarize){
assign(paste0(i),summarize(sims[i]))
}
i
dim(sims[i])
sims[i]
dim(sims[i])
str(sims[i])
str(sims[[i]])
toSummarize<-c("pYoy","pAdult","phiYoy","phiAdult")
for(i in toSummarize){
assign(paste0(i),summarize(sims[[i]]))
}
?apply
summarize<-function(x,margin=c(2,3)){
getSummary<-function(x){
meanX<-mean(x)
quantiles<-quantile(x,c(0.025,0.975))
return(c(meanX,quantiles))
}
result<-data.table(dcast(melt(apply(x,MARGIN=margin,FUN=getSummary)),
Var2+Var3~Var1))
setnames(result,c("sample","river","mean","lower","upper"))
return(result)
}
toSummarize<-c("pYoy","pAdult","phiYoy","phiAdult")
for(i in toSummarize){
assign(paste0(i),summarize(sims[[i]]))
}
toSummarize<-c("pYoy","pAdult","phiYoy","phiAdult")
for(i in toSummarize){
assign(i,summarize(sims[[i]]))
}
i
rm(list=ls())
load("~/westbrookJS/results/outJS.rDATA")
sims<-out$BUGSoutput$sims.list
summarize<-function(x,margin=c(2,3)){
getSummary<-function(x){
meanX<-mean(x)
quantiles<-quantile(x,c(0.025,0.975))
return(c(meanX,quantiles))
}
result<-data.table(dcast(melt(apply(x,MARGIN=margin,FUN=getSummary)),
Var2+Var3~Var1))
setnames(result,c("sample","river","mean","lower","upper"))
return(result)
}
toSummarize<-c("pYoy","pAdult","phiYoy","phiAdult")
for(i in toSummarize){
assign(i,summarize(sims[[i]]))
}
pAdult
plot(mean~sample,col=as.factor(river),pch=sample/4)
plot(mean~sample,data=pYoy,
col=as.factor(river),pch=sample/4)
56/4
result[,season:=rep(1:4,14)]
pYoy[,season:=rep(1:4,14)]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pYoy
plot(mean~sample,data=pYoy,
col=as.factor(river),pch=season)
plot(mean~sample,data=pAdult,
col=as.factor(river),pch=season)
plot(mean~sample,data=pAdult,col=palette()[season])
with(pYoy,error.bar(sample,mean,upper.y=upper,lower.y=lower,interval.type='bla')
)
for(i in toSummarize){
tiff.par(paste0("results/",i,".tif"),mfrow=c(4,1))
for(r in 1:4){
plot(mean~sample,data=get(i),pch=19,col=palette()[season])
with(get(i),error.bar(sample,mean,upper.y=upper,lower.y=lower,interval.type='bla'))
dev.off()
}
}
for(i in toSummarize){
tiff.par(paste0("results/",i,".tif"),mfrow=c(4,1))
for(r in 1:4){
plot(mean~sample,data=get(i)[river==r],pch=19,col=palette()[season])
with(get(i),error.bar(sample,mean,upper.y=upper,lower.y=lower,interval.type='bla'))
dev.off()
}
}
for(i in toSummarize){
tiff.par(paste0("results/",i,".tif"),mfrow=c(4,1))
for(r in 1:4){
plot(mean~sample,data=get(i)[river==r],pch=19,col=palette()[season])
with(get(i)[river==r],
error.bar(sample,mean,
upper.y=upper,lower.y=lower,
interval.type='bla'))
dev.off()
}
}
for(r in 1:4){
plot(mean~sample,data=get(i)[river==r],pch=19,col=palette()[season])
with(get(i)[river==r],
error.bar(sample,mean,
upper.y=upper,lower.y=lower,
interval.type='bla'))
dev.off()
}
}
for(i in toSummarize){
tiff.par(paste0("results/",i,".tif"),mfrow=c(4,1))
for(r in 1:4){
plot(mean~sample,data=get(i)[river==r],pch=19,col=palette()[season])
with(get(i)[river==r],
error.bar(sample,mean,
upper.y=upper,lower.y=lower,
interval.type='bla'))
}
dev.off()
}
for(i in toSummarize){
tiff.par(paste0("results/",i,".tif"),mfrow=c(4,1))
for(r in 1:4){
plot(mean~sample,data=get(i)[river==r],
pch=19,col=palette()[season],ylim=c(0,1))
with(get(i)[river==r],
error.bar(sample,mean,
upper.y=upper,lower.y=lower,
interval.type='bla'))
}
dev.off()
}
for(i in toSummarize){
tiff.par(paste0("results/",i,".tif"),mfrow=c(4,1),mar=c(3,3,1,0))
for(r in 1:4){
plot(mean~sample,data=get(i)[river==r],
pch=19,col=palette()[season],ylim=c(0,1),
main=i)
with(get(i)[river==r],
error.bar(sample,mean,
upper.y=upper,lower.y=lower,
interval.type='bla'))
}
dev.off()
}
rivers<-c("jimmy","mitchell","obear","west brook")
for(i in toSummarize){
tiff.par(paste0("results/",i,".tif"),mfrow=c(4,1),mar=c(3,3,1,0))
for(r in 1:4){
plot(mean~sample,data=get(i)[river==r],
pch=19,col=palette()[season],ylim=c(0,1),
main=rivers[r])
with(get(i)[river==r],
error.bar(sample,mean,
upper.y=upper,lower.y=lower,
interval.type='bla'))
}
dev.off()
}
palette()
?legend
legend('bottom',c("spring","summer","fall","winter"),palette()[1:4],pch=19)
for(i in toSummarize){
tiff.par(paste0("results/",i,".tif"),mfrow=c(4,1),mar=c(3,3,1,0))
for(r in 1:4){
plot(mean~sample,data=get(i)[river==r],
pch=19,col=palette()[season],ylim=c(0,1),
main=rivers[r],xlab="",ylab=i)
with(get(i)[river==r],
error.bar(sample,mean,
upper.y=upper,lower.y=lower,
interval.type='bla'))
}
legend('bottom',c("spring","summer","fall","winter"),palette()[1:4],pch=19)
title(xlab="Sample Number")
dev.off()
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
load("~/westbrookJS/results/d.rDATA")
load("C:/Users/Evan/Desktop/Conte/westbrookJS/dMDataOutbkt1996_2014.RData")
d
nrow(d[sampleNumAdj==56])
plot(enc~sampleNumAdj)
plot(enc~sampleNumAdj,data=d)
dev.off()
d[,length(enc),by=list(sampleNumAdj,zKnown)]
source('C:/Users/Evan/Desktop/Conte/makeDMData/data_prep/dMDataFunctionFromDB.R', echo=TRUE)
makeDMData(_)
makeDMData()
d
d[,length(enc),by=list(zknown,sampleNumAdj)]
d[,length(enc),by=list(zKnown,sampleNumAdj)]
a<-d[,length(enc),by=list(zKnown,sampleNumAdj)]
print(a,nrows=218)
knowns
knowns <- function(samplesInData,cohort,last){
if(cohort<min(samples$year)){born<-2
} else {
born <- samples[year==cohort & season == 2, sampleNumAdj]
}
unknownAfter <- samples[sampleNum==last,sampleNumAdj]
z<-rep(NA,max(samplesInData))
z[samplesInData < born] <- 1 #sets state to not entered before birth
z[samplesInData >= born & samplesInData <= unknownAfter] <- 2 #alive when known
z[samplesInData-born >=4 & z==2]<-3
return(z)
}
samples <- dMData[,list(sampleNumAdj,sampleNum,season,year)]
setkey(samples,sampleNumAdj,sampleNum,season,year)
samples<-unique(samples)
samples
knowns(1:56,2010,55)
knowns(1:56,2012,55)
knowns(1:56,2012,60)
dMData[enc==1,length(enc),by=cohort]
d
knowns(1:56,2012,60)
print(a,nrows=218)
a
a[zknown==3]
a[zKnown==3]
evalList
evalList$evalRows
d[evalList$evalRows]
a<-d[evalList$evalRows]
a[,length(enc),by=list(sampleNumAdj,zKnown)]
a<-a[,length(enc),by=list(sampleNumAdj,zKnown)]
a
setkey(a,sampleNumAdj)
a
a[zKnown==3]
evalList$nSamples
nrow(d)
nrow(d[evalList$evalRows])
a<-d[evalList$evalRows]
a
nrow(a[zKnown!=1])
nrow(a[enc==1])
length(evalList$evalRows)
evalList$nEvalRows
key(dMData)
key(d)
source('C:/Users/Evan/Desktop/Conte/makeDMData/data_prep/dMDataFunctionFromDB.R', echo=TRUE)
makeDMData()
names(dMData)
dMData[!area %in% c('inside','trib']
unique(dMData$area)
dMData[!area %in% c('inside','trib')]
dMData[!area %in% c('inside','trib') & enc==1]
d
d[zKnown %in% c(2,3),sum(which(enc==1))/length(enc),by=sampleNumAdj]
d[zKnown %in% c(2,3),length(enc),by=sampleNumAdj]
d[zKnown %in% c(2,3),length(enc[which(enc==1)])/length(enc),by=sampleNumAdj]
a<-d[zKnown %in% c(2,3),length(enc[which(enc==1)])/length(enc),by=sampleNumAdj]
plot(V1~sampleNumAdj,data=a)
plot(V1~sampleNumAdj,data=a)
a<-d[zKnown %in% c(3),length(enc[which(enc==1)])/length(enc),by=sampleNumAdj]
plot(V1~sampleNumAdj,data=a)
a<-d[zKnown %in% c(2),length(enc[which(enc==1)])/length(enc),by=sampleNumAdj]
plot(V1~sampleNumAdj,data=a)
abline(seq(1,56,4))
abline(v=seq(1,56,4))
abline(v=seq(2,56,4))
plot(V1~sampleNumAdj,data=a)
abline(v=seq(2,56,4))
out
load("~/westbrookJS/results/outJS.rDATA")
out
out
d
d[!evalList$evalRows]
d[!evalList$evalRows,unique(sampleNumAdj)]
num.sets<-function(x){
if(length(x)==0){return(as.integer(0))} else
xlag<-c(-1,x[1:(length(x)-1)])
return(length(which(x-xlag>1)))
}
num.sets(evalList$evalRows)
bla<-dMData[,which(sampleNumAdj!=1)]
num.sets(bla)
dMData[,length(unique(tag))]
evalList$summerSamples
evalList$nonSummerSamples
evalList$nSummerSamples
evalList$nSummerSamples
names(evalList)
source('C:/Users/Evan/Desktop/Conte/makeDMData/data_prep/dMDataFunctionFromDB.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
makeDMData()
evalList$nSummerSamples
evalList$summerSamples
evalList$nonSummerSamples
evalList$nNonSummerSamples
out
c
d
d[,which(sampleNumAdj==1 & riverN==1)]
sampleRows<-array(NA,dim=c(10000,nSamples,nRivers))
nSamples=56
nRivers=4
sampleRows<-array(NA,dim=c(10000,nSamples,nRivers))
for(r in 1:nRivers){
for(s in 1:nSamples){
samplesRows[,s,r]<-d[,which(sampleNumAdj==s & riverN==r)]
}
}
for(r in 1:nRivers){
for(s in 1:nSamples){
sampleRows[,s,r]<-d[,which(sampleNumAdj==s & riverN==r)]
}
}
for(r in 1:nRivers){
for(s in 1:nSamples){
rows<-d[,which(sampleNumAdj==s & riverN==r)]
sampleRows[1:length(rows),s,r]<-rows
}
}
i
r
s
d[,which(sampleNumAdj==s & riverN==r)]
sampleRows<-array(NA,dim=c(20000,nSamples,nRivers))
for(r in 1:nRivers){
for(s in 1:nSamples){
rows<-d[,which(sampleNumAdj==s & riverN==r)]
sampleRows[1:length(rows),s,r]<-rows
}
}
sampleRows
bla<-function(x){return(length(!is.na(x)))}
bla(1:10)
bla(c(1:10,NA)
)
bla<-function(x){return(length(na.omit(x)))}
bla(c(1:10,NA))
bla(c(1:10,NA,NA,NA))
apply(sampleRows,c(2,3),bla)
length(na.omit(sampleRows[,1,r]))
if(length(na.omit(sampleRows[,1,r]))>maxRows){maxRows<-length(na.omit(sampleRows[,1,r]))}
maxRows<-0
if(length(na.omit(sampleRows[,1,r]))>maxRows){maxRows<-length(na.omit(sampleRows[,1,r]))}
maxRows
sampleRows<-samplesRows[1:maxRows,,]
sampleRows<-sampleRows[1:maxRows,,]
sampleRows
str(sampleRows)
evalList$sampleRows<-sampleRows
evalList$sampleRows
source('~/.active-rstudio-document', echo=TRUE)
makeDMData()
source('C:/Users/Evan/Desktop/Conte/westbrookJS/runJS.R', echo=TRUE)
source('C:/Users/Evan/Desktop/Conte/westbrookJS/runJS.R', echo=TRUE)
source('C:/Users/Evan/Desktop/Conte/westbrookJS/runJS.R', echo=TRUE)
sampleRows<-array(NA,dim=c(20000,nSamples,nRivers))
nSampleRows<-array(NA,dim=c(nSamples,nRivers))
for(r in 1:nRivers){
for(s in 1:nSamples){
rows<-d[,which(sampleNumAdj==s & riverN==r)]
sampleRows[1:length(rows),s,r]<-rows
}
nSampleRows[,r]<-apply(sampleRows[,,r],2,
function(x){return(length(na.omit(x)))})
}
sampleRows<-sampleRows[1:max(nSampleRows),,]
nSampleRows
makeDMData()
source('C:/Users/Evan/Desktop/Conte/westbrookJS/runJS.R', echo=TRUE)
nSampleRows
for(r in 1:4){for(s in 1:nSamples){for(n in 1:nSampleRows){print(sampleRows[n,s,r])}}}
warnings()
for(r in 1:4){for(s in 1:nSamples){for(n in 1:nSampleRows[s,r]){print(sampleRows[n,s,r])}}}
for(r in 1:4){for(s in 1:nSamples){for(n in 1:nSampleRows[s,r]){if(is.na(sampleRows[n,s,r]){print('bummer')}}}}
for(r in 1:4){for(s in 1:nSamples){for(n in 1:nSampleRows[s,r]){if(is.na(sampleRows[n,s,r])){print('bummer')}}}}
for(r in 1:4){for(s in 1:nSamples){for(n in 1:nSampleRows[s,r]){if(is.null(sampleRows[n,s,r])){print('bummer')}}}}
dim(sampleRows)
dim(nSampleRows)
source('C:/Users/Evan/Desktop/Conte/westbrookJS/results/summarize.R', echo=TRUE)
d
makeDMData()
source('C:/Users/Evan/Desktop/Conte/makeDMData/data_prep/dMDataFunctionFromDB.R', echo=TRUE)
makeDMData()
d
d[780000:780188]
print(d[780000:780188],nrow=189)
d[zKnown==2 & sampleNumAdj<6]
d[zKnown==3 & sampleNumAdj<6]
d[zKnown==3 & sampleNumAdj<6]
knowns <- function(samplesInData,cohort,last){
if(cohort<min(samples$year)){born<-2
} else {
born <- samples[year==cohort & season == 2, sampleNumAdj]
}
unknownAfter <- samples[sampleNum==last,sampleNumAdj]
z<-rep(NA,max(samplesInData))
z[samplesInData < born] <- 1 #sets state to not entered before birth
z[samplesInData >= born & samplesInData <= unknownAfter] <- 2 #alive when known
z[samplesInData-born >=4 & z==2]<-3
return(z)
}
dMData
dMData[cohort==1999]
with(dMData[tag=='1bf0fe8f47 '],knowns(sampleNumAdj,unique(cohort),unique(last)))
nSamples <- dMData[,max(sampleNumAdj)]
samples <- dMData[,list(sampleNumAdj,sampleNum,season,year)]
setkey(samples,sampleNumAdj,sampleNum,season,year)
samples<-unique(samples)
with(dMData[tag=='1bf0fe8f47 '],knowns(sampleNumAdj,unique(cohort),unique(last)))
samples$year
dMData[tag=='1bf0fe8f47 ',cohort]
names(dMData)
dMData[tag=='1bf0fe8f47 ',river]
dMData[tag=='1bf0fe8f47 ']
dMData[cohort==1999]
with(dMData[tag=='1bf0fe8f47'],knowns(sampleNumAdj,unique(cohort),unique(last)))
with(dMData[tag=='1bf18b701b'],knowns(sampleNumAdj,unique(cohort),unique(last)))
knowns <- function(samplesInData,cohort,last){
if(cohort<min(samples$year)){born<-1-(cohort-min(samples$year))*4
} else {
born <- samples[year==cohort & season == 2, sampleNumAdj]
}
unknownAfter <- samples[sampleNum==last,sampleNumAdj]
z<-rep(NA,max(samplesInData))
z[samplesInData < born] <- 1 #sets state to not entered before birth
z[samplesInData >= born & samplesInData <= unknownAfter] <- 2 #alive when known
z[samplesInData-born >=4 & z==2]<-3
return(z)
}
with(dMData[tag=='1bf18b701b'],knowns(sampleNumAdj,unique(cohort),unique(last)))
dMData[tag=='1bf18b701b',list(sampleNumAdj,cohort,last)]
born<-1-(cohort-min(samples$year))*4
born<-1-(1999-min(samples$year))*4
born
knowns <- function(samplesInData,cohort,last){
if(cohort<min(samples$year)){born<-1+(cohort-min(samples$year))*4
} else {
born <- samples[year==cohort & season == 2, sampleNumAdj]
}
unknownAfter <- samples[sampleNum==last,sampleNumAdj]
z<-rep(NA,max(samplesInData))
z[samplesInData < born] <- 1 #sets state to not entered before birth
z[samplesInData >= born & samplesInData <= unknownAfter] <- 2 #alive when known
z[samplesInData-born >=4 & z==2]<-3
return(z)
}
dMData[tag=='1bf18b701b',knowns(sampleNumAdj,cohort,last)]
dMData[tag=='1bf18b701b',knowns(sampleNumAdj,unique(cohort),unique(last))]
?run.jags
library(runjags)
install.packages('runjags')
out
sims
dim(sims$gamma)
makeDMData()
source('C:/Users/Evan/Desktop/Conte/westbrookJS/runJSOsensei.R', echo=TRUE)
8/3
8/3*60
d
hist(d$sampleNumAdj)
hist(d[enc==1,sampleNumAdj])
hist(d[enc==1,sampleNumAdj],breaks=seq(1,56,1))
hist(d[zKnown!=1,sampleNumAdj],breaks=seq(1,56,1))
hist(d[zKnown %in% c(2,3),sampleNumAdj],breaks=seq(1,56,1))
