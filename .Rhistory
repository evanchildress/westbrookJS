source('~/.active-rstudio-document', echo=TRUE)
cat("model{
phiAdult~dunif(0,1)
phiYoy~dunif(0,1)
pAdult~dunif(0,1)
pYoy~dunif(0,1)
for(s in 1:nSamples){
gamma[s]~dunif(0,1)
}
for(s in 1:nSamples){
#state transition probabilities
ps[1,s,1]<-1-gamma[s]
ps[1,s,2]<-gamma[s]
ps[1,s,3]<-0
ps[1,s,4]<-0
ps[2,s,1]<-0
ps[2,s,2]<-0
ps[2,s,3]<-phiYoy
ps[2,s,4]<-1-phiYoy
ps[3,s,1]<-0
ps[3,s,2]<-0
ps[3,s,3]<-phiAdult
ps[3,s,4]<-1-phiAdult
ps[4,s,1]<-0
ps[4,s,2]<-0
ps[4,s,3]<-0
ps[4,s,4]<-1
}
#Observation state matrix
po[1,1]<-0
po[1,2]<-1
po[2,1]<-pYoy
po[2,2]<-1-pYoy
po[3,1]<-pAdult
po[3,2]<-1-pAdult
po[4,1]<-0
po[4,2]<-1
for(i in 1:nEvalRows){
z[evalRows[i]]~dcat(ps[z[evalRows[i]-1],sample[evalRows[i]],])
enc[evalRows[i]]~dcat(po[z[evalRows[i]],])
}
#   #Calculate derived population parameters
#   for(s in 2:nSamples){
#       qgamma[s-1]<-1-gamma[s]
#   }
#
#
#     cprob[1]<-gamma[2]
#
#     for(s in 3:nSamples){
#       cprob[s-1]<-gamma[s]*prod(qgamma[1:s])
#   }
#
#
#     psi<-sum(cprob[1:nSamples]) #Inclusion probability
#
#     for(s in 1:nSamples){
#       b[s]<-cprob[s]/psi
#     }
}",file="test.txt")
inits<- function(){
list(phi=runif(1,0,1),
gamma=runif(winData$nSamples,0,1),
p=runif(1,0,1)
)
}
# MCMC settings
nb <- 1
ni <- 3
nt <- 1
nc <- 3
varsToMonitor<-c(
'phiYoy'
,'phiAdult'
,'pYoy'
,'pAdult'
#,'b'
#,'psi'
,'z'
)
out <- jags(
data=winData,
inits=inits,
model = "test.txt",
parameters.to.save = varsToMonitor,
n.chains=nc,
n.iter = ni,
n.thin = nt,
n.burnin=nb)
data[210:212]
211 %in% winData$evalRows
data[sample==1,z:=1]
winData<-list(z=data$z,
enc=data$enc,
sample=data$sample,
evalRows=which(data$sample!=1),
nEvalRows=length(which(data$sample!=1)),
nSamples=length(unique(data$sample)))
cat("model{
phiAdult~dunif(0,1)
phiYoy~dunif(0,1)
pAdult~dunif(0,1)
pYoy~dunif(0,1)
for(s in 1:nSamples){
gamma[s]~dunif(0,1)
}
for(s in 1:nSamples){
#state transition probabilities
ps[1,s,1]<-1-gamma[s]
ps[1,s,2]<-gamma[s]
ps[1,s,3]<-0
ps[1,s,4]<-0
ps[2,s,1]<-0
ps[2,s,2]<-0
ps[2,s,3]<-phiYoy
ps[2,s,4]<-1-phiYoy
ps[3,s,1]<-0
ps[3,s,2]<-0
ps[3,s,3]<-phiAdult
ps[3,s,4]<-1-phiAdult
ps[4,s,1]<-0
ps[4,s,2]<-0
ps[4,s,3]<-0
ps[4,s,4]<-1
}
#Observation state matrix
po[1,1]<-0
po[1,2]<-1
po[2,1]<-pYoy
po[2,2]<-1-pYoy
po[3,1]<-pAdult
po[3,2]<-1-pAdult
po[4,1]<-0
po[4,2]<-1
for(i in 1:nEvalRows){
z[evalRows[i]]~dcat(ps[z[evalRows[i]-1],sample[evalRows[i]],])
enc[evalRows[i]]~dcat(po[z[evalRows[i]],])
}
#   #Calculate derived population parameters
#   for(s in 2:nSamples){
#       qgamma[s-1]<-1-gamma[s]
#   }
#
#
#     cprob[1]<-gamma[2]
#
#     for(s in 3:nSamples){
#       cprob[s-1]<-gamma[s]*prod(qgamma[1:s])
#   }
#
#
#     psi<-sum(cprob[1:nSamples]) #Inclusion probability
#
#     for(s in 1:nSamples){
#       b[s]<-cprob[s]/psi
#     }
}",file="test.txt")
inits<- function(){
list(phi=runif(1,0,1),
gamma=runif(winData$nSamples,0,1),
p=runif(1,0,1)
)
}
# MCMC settings
nb <- 1
ni <- 3
nt <- 1
nc <- 3
varsToMonitor<-c(
'phiYoy'
,'phiAdult'
,'pYoy'
,'pAdult'
#,'b'
#,'psi'
,'z'
)
out <- jags(
data=winData,
inits=inits,
model = "test.txt",
parameters.to.save = varsToMonitor,
n.chains=nc,
n.iter = ni,
n.thin = nt,
n.burnin=nb)
inits()
source('~/.active-rstudio-document', echo=TRUE)
out
out$BUGSoutput$z
out$BUGSoutput
str(out$BUGSoutput)
out$BUGSoutput$sims.list$z
str(out$BUGSoutput$sims.list$z)
nExtras<-data[,length(unique(id))]
nExtras
nExtras<-round(data[,length(unique(id))]*0.5)
nExtras
names(data)
nSampleRows<-rep(NA,nSamples)
nSampleRows
sampleRows<-array(NA,dim=c(20000,nSamples))
for(s in 1:nSamples){
rows<-d[,which(sampleNumAdj==s & riverN==r)]
if(length(rows)>0){
sampleRows[1:length(rows),s,r]<-rows
}
}
for(s in 1:nSamples){
rows<-data[,which(sample==s)]
if(length(rows)>0){
sampleRows[1:length(rows),s]<-rows
}
}
samplerows
sampleRows
nSampleRows<-apply(sampleRows,2,function(x){return(length(na.omit(x)))})
nSampleRows
sampleRows<-sampleRows[1:max(nSampleRows),,]
sampleRows<-sampleRows[1:max(nSampleRows),]
sampleRows
source('~/.active-rstudio-document', echo=TRUE)
dim(samplerows)
dim(sampleRows)
nSampleRows
length(nSampleRows)
source('~/.active-rstudio-document', echo=TRUE)
winData$nSamples
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nSampleRows
source('~/.active-rstudio-document', echo=TRUE)
nSampleRows
winData$enc
winData$enc[10500:10504]
winData$z[10500:10504]
source('~/.active-rstudio-document', echo=TRUE)
out
density.plot(out)
traceplot(out)
plot(density(out$BUGSoutput$sims.list$nYoy[1,]))
plot(density(out$BUGSoutput$sims.list$nYoy[2,]))
plot(density(out$BUGSoutput$sims.list$nYoy[3,]))
plot(density(out$BUGSoutput$sims.list$nYoy[4,]))
plot(density(out$BUGSoutput$sims.list$nYoy[5,]))
plot(density(out$BUGSoutput$sims.list$nYoy[6,]))
dim(out$BUGSoutput$sims.list$nYoy)
plot(density(out$BUGSoutput$sims.list$nYoy[,1]))
plot(density(out$BUGSoutput$sims.list$nYoy[,2]))
plot(density(out$BUGSoutput$sims.list$nYoy[,3]))
plot(density(out$BUGSoutput$sims.list$nYoy[,4]))
plot(density(out$BUGSoutput$sims.list$nYoy[,5]))
plot(density(out$BUGSoutput$sims.list$nYoy[,6]))
sims<-out$BUGSoutput$sims.list
apply(sims$nYoy,2,mean)
?quantile
apply(sims$nYoy,2,quantile,probs=c(0.025,0.5,0.975))
getSummary<-function(parameter){
mean<-apply(sims[[parameter]],2,mean)
quants<-t(apply(sims[[parameter]],2,quantile,probs=c(0.025,0.5,0.975)))
result<-data.table(cbind(mean,quants))
setnames(result,c("mean","lower","median","upper"))
return(result)
}
getSummary("nYoy")
nYoy<-getSummary('nYoy')
nAdult<-getSummary('nAdult')
max(nYoy)
error.bar
getSummary<-function(parameter){
mean<-apply(sims[[parameter]],2,mean)
quants<-t(apply(sims[[parameter]],2,quantile,probs=c(0.025,0.5,0.975)))
result<-data.table(cbind(mean,quants))
setnames(result,c("mean","lower","median","upper"))
result[,sample:=0:20]
return(result)
}
nYoy<-getSummary('nYoy')
nAdult<-getSummary('nAdult')
plot(mean~sample,data=nnYoy,ylim=c(0,max(nYoy)))
plot(mean~sample,data=nYoy,ylim=c(0,max(nYoy)))
with(nYoy,error.bar(sample,mean,upper,lower,inter.type='asdf'))
with(nYoy,error.bar(sample,mean,upper,lower,inter.type='dist'))
plot(mean~sample,data=nYoy,ylim=c(0,max(nYoy)))
with(nYoy,error.bar(sample,mean,upper,lower,inter.type='dist'))
error.bar
plot(mean~sample,data=nYoy,ylim=c(0,max(nYoy)))
with(nYoy,error.bar(sample,mean,upper,lower,interval.type='asdf'))
plot(mean~sample,data=nYoy,ylim=c(0,max(nYoy)))
points(median~sample,data=nYoy,pch=19)
with(nYoy,error.bar(sample,mean,upper,lower,interval.type='asdf'))
warnings()
plot(mean~sample,data=nAdult,ylim=c(0,max(nAdult)))
points(median~sample,data=nAdult,pch=19)
with(nAdult,error.bar(sample,mean,upper,lower,interval.type='asdf'))
nAdult
traceplot(out)
abline(h=1)
abline(h=0.9)
abline(h=0.95)
source('~/.active-rstudio-document', echo=TRUE)
a<-0.01
for(i in 1:30){a<-2*a}
a
for(i in 1:29){a<-2*a}
a
a<-0.01
for(i in 1:29){a<-2*a}
a
a<-0.01
for(i in 1:31){a<-2*a}
a
b<-0
for(i in 1:30){a<-2*a;b<-b+a}
a
b
a<-0.01
b<-0
for(i in 1:30){a<-2*a;b<-b+a}
a
b
for(i in 1:29){a<-2*a;b<-b+a}
a<-0.01
b<-0
for(i in 1:29){a<-2*a;b<-b+a}
a
b
traceplot(out)
data
data[,length(id),by=list(sample,state)]
a<-data[,length(id),by=list(sample,state)]
setkey(a,state,sample)
a
plot(mean~sample,data=nYoy,ylim=c(0,max(nYoy)))
with(nYoy,error.bar(sample,mean,upper,lower,interval.type='asdf'))
points(V1~I(sample-1),data=a[state==2],type='l')
plot(mean~sample,data=nAdult,ylim=c(0,max(nAdult)))
with(nAdult,error.bar(sample,mean,upper,lower,interval.type='asdf'))
points(V1~I(sample-1),data=a[state==3],type='l')
a
aug
data
data[id==NA&sample==1]
data[id==NA]
data
data[is.na(id)]
data[is.na(id)&sample==1]
a<-data[,length(id),by=list(sample,state)]
setkey(a,state,sample)
a
data[sample==1&is.na(state)]
a<-data[,length(id),by=list(sample,z)]
setkey(a,state,sample)
setkey(a,z,sample)
a
traceplot(out)
source('~/.active-rstudio-document', echo=TRUE)
traceplot(out)
out
nYoy
source('~/.active-rstudio-document', echo=TRUE)
data[sample==1,z:=1]
nSampleRows<-rep(NA,nSamples+1)
sampleRows<-array(NA,dim=c(20000,nSamples+1))
for(s in 1:(nSamples+1)){
rows<-data[,which(sample==s)]
if(length(rows)>0){
sampleRows[1:length(rows),s]<-rows
}
}
nSampleRows<-apply(sampleRows,2,function(x){return(length(na.omit(x)))})
sampleRows<-sampleRows[1:max(nSampleRows),]
winData<-list(z=data$z,
enc=data$enc,
sample=data$sample,
evalRows=which(data$sample!=1),
nEvalRows=length(which(data$sample!=1)),
nSamples=length(unique(data$sample)),
sampleRows=sampleRows,
nSampleRows=nSampleRows)
cat("model{
phiAdult~dunif(0,1)
phiYoy~dunif(0,1)
pAdult~dunif(0,1)
pYoy~dunif(0,1)
for(s in 1:nSamples){
gamma[s]~dunif(0,1)
}
for(s in 1:nSamples){
#state transition probabilities
ps[1,s,1]<-1-gamma[s]
ps[1,s,2]<-gamma[s]
ps[1,s,3]<-0
ps[1,s,4]<-0
ps[2,s,1]<-0
ps[2,s,2]<-0
ps[2,s,3]<-phiYoy
ps[2,s,4]<-1-phiYoy
ps[3,s,1]<-0
ps[3,s,2]<-0
ps[3,s,3]<-phiAdult
ps[3,s,4]<-1-phiAdult
ps[4,s,1]<-0
ps[4,s,2]<-0
ps[4,s,3]<-0
ps[4,s,4]<-1
}
#Observation state matrix
po[1,1]<-0
po[1,2]<-1
po[2,1]<-pYoy
po[2,2]<-1-pYoy
po[3,1]<-pAdult
po[3,2]<-1-pAdult
po[4,1]<-0
po[4,2]<-1
for(i in 1:nEvalRows){
z[evalRows[i]]~dcat(ps[z[evalRows[i]-1],sample[evalRows[i]],])
enc[evalRows[i]]~dcat(po[z[evalRows[i]],])
}
#Calculate derived population parameters
for(s in 2:nSamples){
qgamma[s-1]<-1-gamma[s]
}
cprob[1]<-gamma[2]
for(s in 3:nSamples){
cprob[s-1]<-gamma[s]*prod(qgamma[1:(s-1)])
}
psi<-sum(cprob[1:(nSamples-1)]) #Inclusion probability
for(s in 2:nSamples){
b[s-1]<-cprob[s-1]/psi
}
for(s in 1:nSamples){
for(n in 1:nSampleRows[s]){
yoyAlive[n,s]<-equals(z[sampleRows[n,s]],2)
adultAlive[n,s]<-equals(z[sampleRows[n,s]],3)
}
nYoy[s]<-sum(yoyAlive[1:nSampleRows[s],s])
nAdult[s]<-sum(adultAlive[1:nSampleRows[s],s])
}
}",file="test.txt")
inits<- function(){
list(phiAdult=runif(1,0,1),
phiYoy=runif(1,0,1),
gamma=runif(winData$nSamples,0,1),
pAdult=runif(1,0,1),
pYoy=runif(1,0,1)
)
}
# MCMC settings
nb <- 1000
ni <- 3000
nt <- 2
nc <- 3
varsToMonitor<-c(
'phiYoy'
,'phiAdult'
,'pYoy'
,'pAdult'
,'nYoy'
,'nAdult'
,'psi'
,'gamma'
)
out <- jags(
data=winData,
inits=inits,
model = "test.txt",
parameters.to.save = varsToMonitor,
n.chains=nc,
n.iter = ni,
n.thin = nt,
n.burnin=nb)
sims<-out$BUGSoutput$sims.list
getSummary<-function(parameter){
mean<-apply(sims[[parameter]],2,mean)
quants<-t(apply(sims[[parameter]],2,quantile,probs=c(0.025,0.5,0.975)))
result<-data.table(cbind(mean,quants))
setnames(result,c("mean","lower","median","upper"))
result[,sample:=0:20]
return(result)
}
nYoy<-getSummary('nYoy')
nAdult<-getSummary('nAdult')
plot(mean~sample,data=nYoy,ylim=c(0,max(nYoy)))
with(nYoy,error.bar(sample,mean,upper,lower,interval.type='asdf'))
plot(mean~sample,data=nAdult,ylim=c(0,max(nAdult)))
with(nAdult,error.bar(sample,mean,upper,lower,interval.type='asdf'))
traceplot(out)
source('C:/Users/Evan/Desktop/Conte/westbrookJS/testData.R', echo=TRUE)
nExtras
source('~/.active-rstudio-document', echo=TRUE)
out
plot(density(sims$nAdult[,1]))
plot(density(sims$nAdult[,2]))
plot(density(sims$nAdult[,3]))
plot(density(sims$nAdult[,4]))
plot(density(sims$nAdult[,5]))
plot(density(sims$nAdult[,6]))
plot(density(sims$nAdult[,7]))
plot(density(sims$nAdult[,8]))
plot(density(sims$nAdult[,9]))
plot(density(sims$nYoy[,1]))
plot(density(sims$nYoy[,2]))
plot(mean~sample,data=nYoy,ylim=c(0,max(nYoy)))
points(median~sample,data=nYoy,pch=19)
with(nYoy,error.bar(sample,mean,upper,lower,interval.type='asdf'))
load("~/westbrookJS/results/outJS.rDATA")
outArray<-as.array(out)
str(outArray)
traceplot(out)
